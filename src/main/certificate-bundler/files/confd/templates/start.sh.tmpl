#!/bin/sh

# Create truststore
{{ if eq (getenv "CREATE_TRUSTSTORE") "true" }}
expect /tmp/create.java.truststore.exp
keytool -delete -storepass {{ getenv "TRUSTSTORE_PASSWORD" }} -alias endeca -keystore {{ getenv "TRUSTSTORE_FILE_PATH" }}

# Remove truststore and re-create if force
{{ if eq (getenv "CREATE_TRUSTSTORE") "force" }}
rm -f {{ getenv "TRUSTSTORE_FILE_PATH" }} || true
expect /tmp/create.java.truststore.exp
keytool -delete -storepass {{ getenv "TRUSTSTORE_PASSWORD" }} -alias endeca -keystore {{ getenv "TRUSTSTORE_FILE_PATH" }}

# Add root to truststore
{{ if getenv "ROOT_CERTIFICATE_FILE_PATH" }}
openssl x509 -outform der -in {{ getenv "ROOT_CERTIFICATE_FILE_PATH" }} -out root.der
keytool -noprompt -import -storepass {{ getenv "TRUSTSTORE_PASSWORD" }} -alias {{ getenv "ROOT_TRUSTSTORE_ALIAS" }} -keystore {{ getenv "TRUSTSTORE_FILE_PATH" }} -file root.der
rm root.der
{{ end }}

# Add intermediate to truststore
{{ if getenv "INTERMEDIATE_CERTIFICATE_FILE_PATH" }}
echo "creating intermediate cert"
openssl x509 -outform der -in {{ getenv "INTERMEDIATE_CERTIFICATE_FILE_PATH" }} -out intermediate.der
keytool -noprompt -import -storepass {{ getenv "TRUSTSTORE_PASSWORD" }} -alias {{ getenv "INTERMEDIATE_TRUSTSTORE_ALIAS" }} -keystore {{ getenv "TRUSTSTORE_FILE_PATH" }} -file intermediate.der
rm intermediate.der
{{ end }}

# end "CREATE_TRUSTSTORE" check
{{ end }}

# Create keystore
{{ if eq (getenv "CREATE_KEYSTORE") "true" }}
echo "creating keystore"
expect /tmp/create.java.keystore.exp
keytool -delete -storepass {{ getenv "KEYSTORE_PASSWORD" }} -alias endeca -keystore {{ getenv "KEYSTORE_FILE_PATH" }}
{{ end }}

# Remove keystore and re-create if force
{{ if eq (getenv "CREATE_KEYSTORE") "force" }}
rm -f {{ getenv "KEYSTORE_FILE_PATH" }} || true
echo "creating keystore"
expect /tmp/create.java.keystore.exp
keytool -delete -storepass {{ getenv "KEYSTORE_PASSWORD" }} -alias endeca -keystore {{ getenv "KEYSTORE_FILE_PATH" }}
{{ end }}

# Create the PKCS12 file
# First combine the key and the public cert into a PKCS12 file
cat {{ getenv "SERVER_KEY_FILE_PATH" }} {{ getenv "SERVER_CERTIFICATE_FILE_PATH" }} | openssl pkcs12 -export -passout pass:{{ getenv "SERVER_KEY_PASSWORD" }} -passin pass:{{ getenv "SERVER_KEY_PASSWORD" }} -out "{{ getenv "SERVER_PKCS12_FILE_PATH" }}" -name "{{ getenv "SERVER_KEYSTORE_ALIAS" }}"

# Second, create the .jks file
keytool -storepass {{ getenv "KEYSTORE_PASSWORD" }} -srcstorepass {{ getenv "SERVER_KEY_PASSWORD" }} -deststorepass {{ getenv "KEYSTORE_PASSWORD" }} -importkeystore -srckeystore {{ getenv "SERVER_PKCS12_FILE_PATH" }} -srcstoretype pkcs12 -destkeystore {{ getenv "KEYSTORE_FILE_PATH" }} 
